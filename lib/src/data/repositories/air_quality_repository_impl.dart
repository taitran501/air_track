import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Add this import
import '../sources/remote/air_quality_api_service.dart';
import '../models/air_quality_model.dart';
import '../../domain/repositories/air_quality_repository.dart';
import '../../domain/entities/air_quality.dart';
import '../sources/local/location_service.dart';

class AirQualityRepositoryImpl implements AirQualityRepository {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final AirQualityApiService _apiService = AirQualityApiService();

  @override
  Future<AirQuality> getAirQuality() async {
    final user = _auth.currentUser;

    // N·∫øu user l√† Guest, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u ngay m√† kh√¥ng c·∫ßn g·ªçi API
    if (user == null || user.isAnonymous) {
      print("üë§ Guest Mode: S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u (kh√¥ng g·ªçi API)");
      
      // Return sample data immediately
      return AirQualityModel(
        aqi: 99, co: 0.3, no2: 10, o3: 15, so2: 5, pm25: 12, pm10: 20,
        timestamp: DateTime.now(),
      );
    }

    // User ƒë√£ ƒëƒÉng nh·∫≠p: L·∫•y d·ªØ li·ªáu t·ª´ API
    try {
      final position = await LocationService.getCurrentLocation();
      
      // Ki·ªÉm tra n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c v·ªã tr√≠
      if (position == null) {
        print("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c v·ªã tr√≠, d√πng d·ªØ li·ªáu t·ª´ cache");
        
        // Th·ª≠ l·∫•y d·ªØ li·ªáu t·ª´ cache
        final cachedDoc = await _firestore.collection("air_quality_data").doc(user.uid).get();
        if (cachedDoc.exists) {
          return AirQualityModel.fromFirestore(cachedDoc.data()!);
        }
        
        // N·∫øu kh√¥ng c√≥ cache, d√πng v·ªã tr√≠ m·∫∑c ƒë·ªãnh
        final data = await _apiService.fetchAirQuality(21.0278, 105.8342); // H√† N·ªôi
        return AirQualityModel.fromApi(data);
      }
      
      print("üìç L·∫•y d·ªØ li·ªáu t·ª´ v·ªã tr√≠: ${position.latitude}, ${position.longitude}");
      final data = await _apiService.fetchAirQuality(position.latitude, position.longitude);
      final airQuality = AirQualityModel.fromApi(data);

      // L∆∞u v√†o Firestore ƒë·ªÉ l·∫•y l·ªãch s·ª≠
      await _firestore.collection("air_quality_data").doc(user.uid).set(airQuality.toFirestore());

      return airQuality;
    } catch (e) {
      print("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ API: $e");
      
      // Th·ª≠ l·∫•y t·ª´ cache
      try {
        final cachedDoc = await _firestore.collection("air_quality_data").doc(user.uid).get();
        if (cachedDoc.exists) {
          print("‚úÖ L·∫•y d·ªØ li·ªáu t·ª´ cache");
          return AirQualityModel.fromFirestore(cachedDoc.data()!);
        }
      } catch (_) {}
      
      throw Exception("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠.");
    }
  }
}
